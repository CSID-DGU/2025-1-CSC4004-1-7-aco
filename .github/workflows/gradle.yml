name: Deploy to EC2

on:
  pull_request:
    branches: [ dev ]  # dev 브랜치에 PR 발생 시 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}                # OpenAI API 키 환경변수
      DOCKER_IMAGE_NAME: janghyoseok0422/maeumnaru-spring   # Docker 이미지 이름 (자신에 맞게 수정)
      DOCKER_IMAGE_TAG: latest                                     # Docker 태그 (필요 시 변경)

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Base64 인코딩된 application-dev.properties를 디코딩하여 프로젝트 리소스 폴더에 저장
      - name: Decode application-dev.properties and save
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES }}" | base64 -d > ./BE/src/main/resources/application-dev.properties

      # 3. JDK 17 환경 셋업
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. BE 모듈 빌드 (Gradle Wrapper 사용)
      - name: Build BE module only
        run: |
          cd BE
          chmod +x ../gradlew
          ../gradlew clean build -x test
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # 5. 빌드 결과(jar 파일) 확인용 리스트 출력
      - name: List jar files in BE/build/libs
        run: ls -al BE/build/libs/

      - name: Write hub username
        run: |
          echo "${{ secrets.DOCKERHUB_USERNAME }}" >> secret.username
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" >> secret.password
          cat secret.username
          cat secret.password

      # 6. Docker Hub 로그인 (Docker 이미지 푸시를 위해)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 7. Docker 이미지 빌드 (BE 폴더 기준)
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG ./BE

      # 8. 빌드한 Docker 이미지 Docker Hub에 푸시
      - name: Push Docker image to Docker Hub
        run: |
          docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG

      # 9. SSH 접속 후 EC2 서버에서 Docker 이미지 pull 및 컨테이너 재실행
      - name: Deploy Docker container on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # 이미지 최신 상태로 당겨오기
            docker pull $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG

            # 기존 컨테이너가 있으면 종료 및 삭제
            docker stop maeumnaru || true
            docker rm maeumnaru || true

            # 새 컨테이너 백그라운드 실행, 8080 포트 매핑
            docker run -d --name maeumnaru -p 8080:8080 $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG